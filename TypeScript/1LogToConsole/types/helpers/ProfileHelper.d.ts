import { DatabaseServer } from "../servers/DatabaseServer";
import { SaveServer } from "../servers/SaveServer";
import { FenceService } from "../services/FenceService";
import { IPmcData, Skills, Stats } from "../@types/eft/common/IPmcData";
import { IAkiProfile } from "../@types/eft/profile/IAkiProfile";
import { IValidateNicknameRequestData } from "../@types/eft/profile/IValidateNicknameRequestData";
import { JsonUtil } from "../utils/JsonUtil";
import { TimeUtil } from "../utils/TimeUtil";
import { ItemHelper } from "./ItemHelper";
import { IWatermark } from "../@types/spt/utils/IWatermark";
import { BotGenerator } from "../generators/BotGenerator";
export declare class ProfileHelper {
    private jsonUtil;
    private watermark;
    private timeUtil;
    private saveServer;
    private databaseServer;
    private botGenerator;
    private itemHelper;
    private fenceService;
    constructor(jsonUtil: JsonUtil, watermark: IWatermark, timeUtil: TimeUtil, saveServer: SaveServer, databaseServer: DatabaseServer, botGenerator: BotGenerator, itemHelper: ItemHelper, fenceService: FenceService);
    resetProfileQuestCondition(sessionID: string, conditionId: string): void;
    getCompleteProfile(sessionID: string): IPmcData[];
    private isWiped;
    getFullProfile(sessionID: string): IAkiProfile;
    getPmcProfile(sessionID: string): IPmcData;
    getScavProfile(sessionID: string): IPmcData;
    setScavProfile(sessionID: string, scavData: IPmcData): void;
    getScavSkills(sessionID: string): Skills;
    generatePlayerScav(sessionID: string): IPmcData;
    private removeSecureContainer;
    private getDefaultScavSkills;
    getScavStats(sessionID: string): Stats;
    getDefaultCounters(): Stats;
    getServerVersion(): string;
    getScavLevel(sessionID: string): number;
    getScavExperience(sessionID: string): number;
    setScavCooldownTimer(profile: IPmcData, pmcData: IPmcData): IPmcData;
    isNicknameTaken(info: IValidateNicknameRequestData, sessionID: string): boolean;
    getProfileByPmcId(pmcId: string): IPmcData;
    getExperience(level: number): number;
    getMaxLevel(): number;
    getDefaultAkiDataObject(): any;
}
